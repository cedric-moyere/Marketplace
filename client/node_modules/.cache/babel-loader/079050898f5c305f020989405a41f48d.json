{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { app } from '../../mongoDB-sdk';\nimport { addUser, getUser } from '../../service';\nimport { handleLogin, handleAuthenticationError, handleLogout } from '../../state/actions/authentication';\n\nconst useAuthentication = dispatch => {\n  function handleUserRegistration(user) {\n    return new Promise(resolve => {\n      app.emailPasswordAuth.registerUser(user.email, user.password).then(async () => {\n        app.logIn(Realm.Credentials.emailPassword(user.email, user.password)).then(() => {\n          addUser(user);\n          dispatch(handleLogin(user));\n          resolve(user);\n        });\n      }).catch(err => dispatch(handleAuthenticationError(err)));\n    });\n  }\n\n  function handleUserLogin(email, password) {\n    return new Promise(resolve => {\n      app.logIn(Realm.Credentials.emailPassword(email, password)).then(async () => {\n        // verify current user \n        const currentUser = await app.currentUser; // retrieve user profile\n\n        getUser(currentUser.email, currentUser.password).then(userProfile => {\n          dispatch(handleLogin(userProfile));\n          resolve(currentUser);\n        });\n      }).catch(err => dispatch(handleAuthenticationError(err)));\n    });\n  }\n\n  async function handleUserLogout() {\n    var _app$currentUser;\n\n    (_app$currentUser = app.currentUser) === null || _app$currentUser === void 0 ? void 0 : _app$currentUser.logOut().then(() => dispatch(handleLogout())).catch(err => console.log(err));\n  }\n\n  async function handleAuthentication() {\n    const currentUser = await app.currentUser;\n    getUser(currentUser === null || currentUser === void 0 ? void 0 : currentUser.email).then(userProfile => !!currentUser && dispatch(handleLogin(userProfile))).catch(err => dispatch(handleAuthenticationError(err)));\n  }\n\n  return {\n    handleUserRegistration,\n    handleUserLogin,\n    handleUserLogout,\n    handleAuthentication\n  };\n};\n\nexport default useAuthentication;","map":{"version":3,"sources":["C:/Users/Administrateur/Documents/03-DEV/Cours/Udemy/Marketplace/client/src/lib/hooks/useAuthentication/index.js"],"names":["Realm","app","addUser","getUser","handleLogin","handleAuthenticationError","handleLogout","useAuthentication","dispatch","handleUserRegistration","user","Promise","resolve","emailPasswordAuth","registerUser","email","password","then","logIn","Credentials","emailPassword","catch","err","handleUserLogin","currentUser","userProfile","handleUserLogout","logOut","console","log","handleAuthentication"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AACA,SAASC,GAAT,QAAoB,mBAApB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,eAAjC;AACA,SAASC,WAAT,EAAsBC,yBAAtB,EAAiDC,YAAjD,QAAqE,oCAArE;;AAEA,MAAMC,iBAAiB,GAAIC,QAAD,IAAc;AACpC,WAASC,sBAAT,CAAgCC,IAAhC,EAAsC;AAClC,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1BX,MAAAA,GAAG,CAACY,iBAAJ,CACKC,YADL,CACkBJ,IAAI,CAACK,KADvB,EAC8BL,IAAI,CAACM,QADnC,EAEKC,IAFL,CAEU,YAAY;AACdhB,QAAAA,GAAG,CAACiB,KAAJ,CAAUlB,KAAK,CAACmB,WAAN,CAAkBC,aAAlB,CAAgCV,IAAI,CAACK,KAArC,EAA4CL,IAAI,CAACM,QAAjD,CAAV,EACKC,IADL,CACU,MAAM;AACRf,UAAAA,OAAO,CAACQ,IAAD,CAAP;AACAF,UAAAA,QAAQ,CAACJ,WAAW,CAACM,IAAD,CAAZ,CAAR;AACAE,UAAAA,OAAO,CAACF,IAAD,CAAP;AACH,SALL;AAMH,OATL,EAUKW,KAVL,CAUWC,GAAG,IAAId,QAAQ,CAACH,yBAAyB,CAACiB,GAAD,CAA1B,CAV1B;AAWC,KAZE,CAAP;AAaH;;AACD,WAASC,eAAT,CAAyBR,KAAzB,EAAgCC,QAAhC,EAA0C;AACtC,WAAO,IAAIL,OAAJ,CAAYC,OAAO,IAAI;AAC1BX,MAAAA,GAAG,CAACiB,KAAJ,CAAUlB,KAAK,CAACmB,WAAN,CAAkBC,aAAlB,CAAgCL,KAAhC,EAAuCC,QAAvC,CAAV,EACKC,IADL,CACU,YAAY;AACd;AACA,cAAMO,WAAW,GAAG,MAAMvB,GAAG,CAACuB,WAA9B,CAFc,CAGd;;AACArB,QAAAA,OAAO,CAACqB,WAAW,CAACT,KAAb,EAAoBS,WAAW,CAACR,QAAhC,CAAP,CACKC,IADL,CACUQ,WAAW,IAAI;AACjBjB,UAAAA,QAAQ,CAACJ,WAAW,CAACqB,WAAD,CAAZ,CAAR;AACIb,UAAAA,OAAO,CAACY,WAAD,CAAP;AACP,SAJL;AAKH,OAVL,EAWKH,KAXL,CAWWC,GAAG,IAAId,QAAQ,CAACH,yBAAyB,CAACiB,GAAD,CAA1B,CAX1B;AAYC,KAbE,CAAP;AAcH;;AACD,iBAAeI,gBAAf,GAAkC;AAAA;;AAC9B,wBAAAzB,GAAG,CAACuB,WAAJ,sEAAiBG,MAAjB,GACKV,IADL,CACU,MAAMT,QAAQ,CAACF,YAAY,EAAb,CADxB,EAEKe,KAFL,CAEWC,GAAG,IAAIM,OAAO,CAACC,GAAR,CAAYP,GAAZ,CAFlB;AAGH;;AACD,iBAAeQ,oBAAf,GAAsC;AAClC,UAAMN,WAAW,GAAG,MAAMvB,GAAG,CAACuB,WAA9B;AACArB,IAAAA,OAAO,CAACqB,WAAD,aAACA,WAAD,uBAACA,WAAW,CAAET,KAAd,CAAP,CACKE,IADL,CACUQ,WAAW,IAAI,CAAC,CAACD,WAAF,IAAiBhB,QAAQ,CAACJ,WAAW,CAACqB,WAAD,CAAZ,CADlD,EAEKJ,KAFL,CAEWC,GAAG,IAAKd,QAAQ,CAACH,yBAAyB,CAACiB,GAAD,CAA1B,CAF3B;AAGH;;AACD,SAAO;AACHb,IAAAA,sBADG;AAEHc,IAAAA,eAFG;AAGHG,IAAAA,gBAHG;AAIHI,IAAAA;AAJG,GAAP;AAMH,CAjDD;;AAkDA,eAAevB,iBAAf","sourcesContent":["import * as Realm from \"realm-web\";\nimport { app } from '../../mongoDB-sdk'\nimport { addUser, getUser } from '../../service'\nimport { handleLogin, handleAuthenticationError, handleLogout } from '../../state/actions/authentication'\n\nconst useAuthentication = (dispatch) => { \n    function handleUserRegistration(user) { \n        return new Promise(resolve => { \n            app.emailPasswordAuth\n                .registerUser(user.email, user.password)\n                .then(async () => { \n                    app.logIn(Realm.Credentials.emailPassword(user.email, user.password))\n                        .then(() => { \n                            addUser(user)\n                            dispatch(handleLogin(user))\n                            resolve(user)  \n                        })\n                })\n                .catch(err => dispatch(handleAuthenticationError(err)))\n            })\n    }\n    function handleUserLogin(email, password) { \n        return new Promise(resolve => {\n            app.logIn(Realm.Credentials.emailPassword(email, password))\n                .then(async () => { \n                    // verify current user \n                    const currentUser = await app.currentUser\n                    // retrieve user profile\n                    getUser(currentUser.email, currentUser.password)\n                        .then(userProfile => { \n                            dispatch(handleLogin(userProfile))\n                                resolve(currentUser)\n                        }) \n                })\n                .catch(err => dispatch(handleAuthenticationError(err)))\n            })\n    } \n    async function handleUserLogout() { \n        app.currentUser?.logOut()\n            .then(() => dispatch(handleLogout()))\n            .catch(err => console.log(err))\n    }\n    async function handleAuthentication() { \n        const currentUser = await app.currentUser\n        getUser(currentUser?.email)\n            .then(userProfile => !!currentUser && dispatch(handleLogin(userProfile)))\n            .catch(err =>  dispatch(handleAuthenticationError(err)))\n    }\n    return {\n        handleUserRegistration,\n        handleUserLogin,\n        handleUserLogout, \n        handleAuthentication    \n    }\n}\nexport default useAuthentication\n"]},"metadata":{},"sourceType":"module"}